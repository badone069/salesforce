{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red202\green202\blue202;
\red140\green211\blue254;\red194\green126\blue101;\red70\green137\blue204;\red67\green192\blue160;\red212\green214\blue154;
\red89\green138\blue67;\red167\green197\blue152;\red66\green179\blue255;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c61176\c86275\c99608;\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;
\cssrgb\c41569\c60000\c33333;\cssrgb\c70980\c80784\c65882;\cssrgb\c30980\c75686\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \{ \cf5 \strokec5 LightningElement\cf4 \strokec4 , \cf5 \strokec5 api\cf4 \strokec4 , \cf5 \strokec5 track\cf4 \strokec4  \} \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 'lwc'\cf4 \strokec4 ;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 uploadFileToAWS\cf4 \strokec4  \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 '@salesforce/apex/AWSFileUploadController.uploadFileToAWS'\cf4 \strokec4 ; \cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 displayUploadedFiles\cf4 \strokec4  \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 '@salesforce/apex/AWSFileUploadController.displayUploadedFiles'\cf4 \strokec4 ;       \cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \{\cf5 \strokec5 ShowToastEvent\cf4 \strokec4 \} \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 'lightning/platformShowToastEvent'\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 export\cf4 \strokec4  \cf2 \strokec2 default\cf4 \strokec4  \cf7 \strokec7 class\cf4 \strokec4  \cf8 \strokec8 AwsFileUploader\cf4 \strokec4  \cf7 \strokec7 extends\cf4 \strokec4  \cf8 \strokec8 LightningElement\cf4 \strokec4  \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     @\cf9 \strokec9 api\cf4 \strokec4  \cf5 \strokec5 recordId\cf4 \strokec4 ; \cf10 \strokec10 //get the recordId for which files will be attached.\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 selectedFilesToUpload\cf4 \strokec4  = []; \cf10 \strokec10 //store selected files\cf4 \cb1 \strokec4 \
\cb3     @\cf9 \strokec9 track\cf4 \strokec4  \cf5 \strokec5 showSpinner\cf4 \strokec4  = \cf7 \strokec7 false\cf4 \strokec4 ; \cf10 \strokec10 //used for when to show spinner\cf4 \cb1 \strokec4 \
\cb3     @\cf9 \strokec9 track\cf4 \strokec4  \cf5 \strokec5 fileName\cf4 \strokec4 ; \cf10 \strokec10 //to display the selected file name\cf4 \cb1 \strokec4 \
\cb3     @\cf9 \strokec9 track\cf4 \strokec4  \cf5 \strokec5 tableData\cf4 \strokec4 ; \cf10 \strokec10 //to display the uploaded file and link to AWS\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 file\cf4 \strokec4 ; \cf10 \strokec10 //holding file instance\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 myFile\cf4 \strokec4 ;    \cb1 \
\cb3     \cf5 \strokec5 fileType\cf4 \strokec4 ;\cf10 \strokec10 //holding file type\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 fileReaderObj\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 base64FileData\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\
\cb3      \cf10 \strokec10 // get the file name from the user's selection\cf4 \cb1 \strokec4 \
\cb3      \cf9 \strokec9 handleSelectedFiles\cf4 \strokec4 (\cf5 \strokec5 event\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4 (\cf5 \strokec5 event\cf4 \strokec4 .\cf5 \strokec5 target\cf4 \strokec4 .\cf5 \strokec5 files\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  > \cf11 \strokec11 0\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 selectedFilesToUpload\cf4 \strokec4  = \cf5 \strokec5 event\cf4 \strokec4 .\cf5 \strokec5 target\cf4 \strokec4 .\cf5 \strokec5 files\cf4 \strokec4 ;\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileName\cf4 \strokec4  = \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 selectedFilesToUpload\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ].\cf5 \strokec5 name\cf4 \strokec4 ;\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileType\cf4 \strokec4  = \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 selectedFilesToUpload\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ].\cf5 \strokec5 type\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf6 \strokec6 'fileName='\cf4 \strokec4  + \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileName\cf4 \strokec4 );\cb1 \
\cb3             \cf5 \strokec5 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf6 \strokec6 'fileType='\cf4 \strokec4  + \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileType\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf10 \strokec10 //parsing the file and prepare for upload.\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 handleFileUpload\cf4 \strokec4 ()\{\cb1 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4 (\cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 selectedFilesToUpload\cf4 \strokec4 .\cf5 \strokec5 length\cf4 \strokec4  > \cf11 \strokec11 0\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 showSpinner\cf4 \strokec4  = \cf7 \strokec7 true\cf4 \strokec4 ;\cb1 \
\cb3             \cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 file\cf4 \strokec4  = \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 selectedFilesToUpload\cf4 \strokec4 [\cf11 \strokec11 0\cf4 \strokec4 ];\cb1 \
\cb3             \cf10 \strokec10 //create an intance of File\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileReaderObj\cf4 \strokec4  = \cf7 \strokec7 new\cf4 \strokec4  \cf8 \strokec8 FileReader\cf4 \strokec4 ();\cb1 \
\
\cb3             \cf10 \strokec10 //this callback function in for fileReaderObj.readAsDataURL\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileReaderObj\cf4 \strokec4 .\cf5 \strokec5 onloadend\cf4 \strokec4  = (() \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3                 \cf10 \strokec10 //get the uploaded file in base64 format\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 fileContents\cf4 \strokec4  = \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileReaderObj\cf4 \strokec4 .\cf5 \strokec5 result\cf4 \strokec4 ;\cb1 \
\cb3                 \cf5 \strokec5 fileContents\cf4 \strokec4  = \cf5 \strokec5 fileContents\cf4 \strokec4 .\cf9 \strokec9 substr\cf4 \strokec4 (\cf5 \strokec5 fileContents\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf6 \strokec6 ','\cf4 \strokec4 )+\cf11 \strokec11 1\cf4 \strokec4 )\cb1 \
\cb3                 \cb1 \
\cb3                 \cf10 \strokec10 //read the file chunkwise\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 sliceSize\cf4 \strokec4  = \cf11 \strokec11 1024\cf4 \strokec4 ;           \cb1 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 byteCharacters\cf4 \strokec4  = \cf9 \strokec9 atob\cf4 \strokec4 (\cf5 \strokec5 fileContents\cf4 \strokec4 );\cb1 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 bytesLength\cf4 \strokec4  = \cf5 \strokec5 byteCharacters\cf4 \strokec4 .\cf12 \strokec12 length\cf4 \strokec4 ;\cb1 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 slicesCount\cf4 \strokec4  = \cf5 \strokec5 Math\cf4 \strokec4 .\cf9 \strokec9 ceil\cf4 \strokec4 (\cf5 \strokec5 bytesLength\cf4 \strokec4  / \cf5 \strokec5 sliceSize\cf4 \strokec4 );                \cb1 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 byteArrays\cf4 \strokec4  = \cf7 \strokec7 new\cf4 \strokec4  \cf8 \strokec8 Array\cf4 \strokec4 (\cf5 \strokec5 slicesCount\cf4 \strokec4 );\cb1 \
\cb3                 \cf2 \strokec2 for\cf4 \strokec4  (\cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 sliceIndex\cf4 \strokec4  = \cf11 \strokec11 0\cf4 \strokec4 ; \cf5 \strokec5 sliceIndex\cf4 \strokec4  < \cf5 \strokec5 slicesCount\cf4 \strokec4 ; ++\cf5 \strokec5 sliceIndex\cf4 \strokec4 ) \{\cb1 \
\cb3                     \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 begin\cf4 \strokec4  = \cf5 \strokec5 sliceIndex\cf4 \strokec4  * \cf5 \strokec5 sliceSize\cf4 \strokec4 ;\cb1 \
\cb3                     \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 end\cf4 \strokec4  = \cf8 \strokec8 Math\cf4 \strokec4 .\cf9 \strokec9 min\cf4 \strokec4 (\cf5 \strokec5 begin\cf4 \strokec4  + \cf5 \strokec5 sliceSize\cf4 \strokec4 , \cf5 \strokec5 bytesLength\cf4 \strokec4 );                    \cb1 \
\cb3                     \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 bytes\cf4 \strokec4  = \cf7 \strokec7 new\cf4 \strokec4  \cf8 \strokec8 Array\cf4 \strokec4 (\cf5 \strokec5 end\cf4 \strokec4  - \cf5 \strokec5 begin\cf4 \strokec4 );\cb1 \
\cb3                     \cf2 \strokec2 for\cf4 \strokec4  (\cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 offset\cf4 \strokec4  = \cf5 \strokec5 begin\cf4 \strokec4 , \cf5 \strokec5 i\cf4 \strokec4  = \cf11 \strokec11 0\cf4 \strokec4  ; \cf5 \strokec5 offset\cf4 \strokec4  < \cf5 \strokec5 end\cf4 \strokec4 ; ++\cf5 \strokec5 i\cf4 \strokec4 , ++\cf5 \strokec5 offset\cf4 \strokec4 ) \{\cb1 \
\cb3                         \cf5 \strokec5 bytes\cf4 \strokec4 [\cf5 \strokec5 i\cf4 \strokec4 ] = \cf5 \strokec5 byteCharacters\cf4 \strokec4 [\cf5 \strokec5 offset\cf4 \strokec4 ].\cf9 \strokec9 charCodeAt\cf4 \strokec4 (\cf11 \strokec11 0\cf4 \strokec4 );                        \cb1 \
\cb3                     \}\cb1 \
\cb3                     \cf5 \strokec5 byteArrays\cf4 \strokec4 [\cf5 \strokec5 sliceIndex\cf4 \strokec4 ] = \cf7 \strokec7 new\cf4 \strokec4  \cf8 \strokec8 Uint8Array\cf4 \strokec4 (\cf5 \strokec5 bytes\cf4 \strokec4 );                    \cb1 \
\cb3                 \}\cb1 \
\cb3                 \cb1 \
\cb3                 \cf10 \strokec10 //from arraybuffer create a File instance\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 myFile\cf4 \strokec4  =  \cf7 \strokec7 new\cf4 \strokec4  \cf9 \strokec9 File\cf4 \strokec4 (\cf5 \strokec5 byteArrays\cf4 \strokec4 , \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileName\cf4 \strokec4 , \{ \cf5 \strokec5 type:\cf4 \strokec4  \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileType\cf4 \strokec4  \});\cb1 \
\cb3                 \cb1 \
\cb3                 \cf10 \strokec10 //callback for final base64 String format\cf4 \cb1 \strokec4 \
\cb3                 \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 reader\cf4 \strokec4  = \cf7 \strokec7 new\cf4 \strokec4  \cf9 \strokec9 FileReader\cf4 \strokec4 ();\cb1 \
\cb3                 \cf5 \strokec5 reader\cf4 \strokec4 .\cf5 \strokec5 onloadend\cf4 \strokec4  = (() \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3                     \cf7 \strokec7 let\cf4 \strokec4  \cf5 \strokec5 base64data\cf4 \strokec4  = \cf5 \strokec5 reader\cf4 \strokec4 .\cf5 \strokec5 result\cf4 \strokec4 ;\cb1 \
\cb3                     \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 base64FileData\cf4 \strokec4  = \cf5 \strokec5 base64data\cf4 \strokec4 .\cf9 \strokec9 substr\cf4 \strokec4 (\cf5 \strokec5 base64data\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf6 \strokec6 ','\cf4 \strokec4 )+\cf11 \strokec11 1\cf4 \strokec4 ); \cb1 \
\cb3                     \cf7 \strokec7 this\cf4 \strokec4 .\cf9 \strokec9 fileUpload\cf4 \strokec4 ();\cb1 \
\cb3                 \});\cb1 \
\cb3                 \cf5 \strokec5 reader\cf4 \strokec4 .\cf9 \strokec9 readAsDataURL\cf4 \strokec4 (\cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 myFile\cf4 \strokec4 );                                 \cb1 \
\cb3             \});\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileReaderObj\cf4 \strokec4 .\cf9 \strokec9 readAsDataURL\cf4 \strokec4 (\cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 file\cf4 \strokec4 );            \cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileName\cf4 \strokec4  = \cf6 \strokec6 'Please select a file to upload!'\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf10 \strokec10 //this method calls Apex's controller to upload file in AWS\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 fileUpload\cf4 \strokec4 ()\{\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 //implicit call to apex\cf4 \cb1 \strokec4 \
\cb3         \cf9 \strokec9 uploadFileToAWS\cf4 \strokec4 (\{ \cf5 \strokec5 parentId:\cf4 \strokec4  \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 recordId\cf4 \strokec4 , \cb1 \
\cb3                         \cf5 \strokec5 strfileName:\cf4 \strokec4  \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 file\cf4 \strokec4 .\cf5 \strokec5 name\cf4 \strokec4 , \cb1 \
\cb3                         \cf5 \strokec5 fileType:\cf4 \strokec4  \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 file\cf4 \strokec4 .\cf5 \strokec5 type\cf4 \strokec4 ,\cb1 \
\cb3                         \cf5 \strokec5 fileContent:\cf4 \strokec4  \cf9 \strokec9 encodeURIComponent\cf4 \strokec4 (\cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 base64FileData\cf4 \strokec4 )\})\cb1 \
\cb3         .\cf9 \strokec9 then\cf4 \strokec4 (\cf5 \strokec5 result\cf4 \strokec4  \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf5 \strokec5 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf6 \strokec6 'Upload result = '\cf4 \strokec4  +\cf5 \strokec5 result\cf4 \strokec4 );            \cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileName\cf4 \strokec4  = \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 fileName\cf4 \strokec4  + \cf6 \strokec6 ' - Uploaded Successfully'\cf4 \strokec4 ;\cb1 \
\cb3             \cf10 \strokec10 //call to show uploaded files\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf9 \strokec9 getUploadedFiles\cf4 \strokec4 (); \cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 showSpinner\cf4 \strokec4  = \cf7 \strokec7 false\cf4 \strokec4 ;\cb1 \
\cb3             \cf10 \strokec10 // Showing Success message after uploading\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf9 \strokec9 dispatchEvent\cf4 \strokec4 (\cb1 \
\cb3                 \cf7 \strokec7 new\cf4 \strokec4  \cf9 \strokec9 ShowToastEvent\cf4 \strokec4 (\{\cb1 \
\cb3                     \cf5 \strokec5 title:\cf4 \strokec4  \cf6 \strokec6 'Success!!'\cf4 \strokec4 ,\cb1 \
\cb3                     \cf5 \strokec5 message:\cf4 \strokec4  \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 file\cf4 \strokec4 .\cf5 \strokec5 name\cf4 \strokec4  + \cf6 \strokec6 ' - Uploaded Successfully!!!'\cf4 \strokec4 ,\cb1 \
\cb3                     \cf5 \strokec5 variant:\cf4 \strokec4  \cf6 \strokec6 'success'\cf4 \strokec4 ,\cb1 \
\cb3                 \}),\cb1 \
\cb3             );\cb1 \
\cb3         \})\cb1 \
\cb3         .\cf9 \strokec9 catch\cf4 \strokec4 (\cf5 \strokec5 error\cf4 \strokec4  \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf10 \strokec10 // Error to show during upload\cf4 \cb1 \strokec4 \
\cb3             \cf5 \strokec5 window\cf4 \strokec4 .\cf5 \strokec5 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf5 \strokec5 error\cf4 \strokec4 );\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf9 \strokec9 dispatchEvent\cf4 \strokec4 (\cb1 \
\cb3                 \cf7 \strokec7 new\cf4 \strokec4  \cf9 \strokec9 ShowToastEvent\cf4 \strokec4 (\{\cb1 \
\cb3                     \cf5 \strokec5 title:\cf4 \strokec4  \cf6 \strokec6 'Error in uploading File'\cf4 \strokec4 ,\cb1 \
\cb3                     \cf5 \strokec5 message:\cf4 \strokec4  \cf5 \strokec5 error\cf4 \strokec4 .\cf5 \strokec5 message\cf4 \strokec4 ,\cb1 \
\cb3                     \cf5 \strokec5 variant:\cf4 \strokec4  \cf6 \strokec6 'error'\cf4 \strokec4 ,\cb1 \
\cb3                 \}),\cb1 \
\cb3             );\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 showSpinner\cf4 \strokec4  = \cf7 \strokec7 false\cf4 \strokec4 ;\cb1 \
\cb3         \});        \cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf10 \strokec10 //retrieve uploaded file information to display to the user\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 getUploadedFiles\cf4 \strokec4 ()\{\cb1 \
\cb3         \cf9 \strokec9 displayUploadedFiles\cf4 \strokec4 (\{\cf5 \strokec5 parentId:\cf4 \strokec4  \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 recordId\cf4 \strokec4 \})\cb1 \
\cb3         .\cf9 \strokec9 then\cf4 \strokec4 (\cf5 \strokec5 data\cf4 \strokec4  \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 tableData\cf4 \strokec4  = \cf5 \strokec5 data\cf4 \strokec4 ;\cb1 \
\cb3             \cf5 \strokec5 console\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf6 \strokec6 'tableData='\cf4 \strokec4  + \cf7 \strokec7 this\cf4 \strokec4 .\cf5 \strokec5 tableData\cf4 \strokec4 );\cb1 \
\cb3         \})\cb1 \
\cb3         .\cf9 \strokec9 catch\cf4 \strokec4 (\cf5 \strokec5 error\cf4 \strokec4  \cf7 \strokec7 =>\cf4 \strokec4  \{\cb1 \
\cb3             \cf7 \strokec7 this\cf4 \strokec4 .\cf9 \strokec9 dispatchEvent\cf4 \strokec4 (\cb1 \
\cb3                 \cf7 \strokec7 new\cf4 \strokec4  \cf9 \strokec9 ShowToastEvent\cf4 \strokec4 (\{\cb1 \
\cb3                     \cf5 \strokec5 title:\cf4 \strokec4  \cf6 \strokec6 'Error in displaying data!!'\cf4 \strokec4 ,\cb1 \
\cb3                     \cf5 \strokec5 message:\cf4 \strokec4  \cf5 \strokec5 error\cf4 \strokec4 .\cf5 \strokec5 message\cf4 \strokec4 ,\cb1 \
\cb3                     \cf5 \strokec5 variant:\cf4 \strokec4  \cf6 \strokec6 'error'\cf4 \strokec4 ,\cb1 \
\cb3                 \}),\cb1 \
\cb3             );\cb1 \
\cb3         \});\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
}